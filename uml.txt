@startuml

class Medicalcase extends BaseEntity {
  - title : String
  - owner : User
  - content : List<Content>
  - members : Set<User>
  - reactions : Set<UUID>
  - tags : Set<CaseTag>
  - votingOptions : LinkedHashSet<String>
  - votes : Set<Vote>
  + react(user : User) : void
  + addMember(user : User) : void
  + edit() : void
  + viewVotes() : void
  + viewMembers() : void
  + castVote(user : User) : void
  + evaluateVotes() : void
  + openChat() : void
}

class Vote {
  - user : Integer
  - answers : Map<String, Integer>
}

class User extends BaseEntity {
  - email : Email
  - hashedPassword : Password
  - profile : Profile
  - socials : Socials
  - verified : boolean
  - chats : Set<Chat>
  - medicalcases : Map<Ownership, Set<Medicalcase>
  + setMedicalcases() : void
  + getChats() : Set<Chat>
  + getSocials() : Socials
  + getProfile() : Profile
  + addFriend(user : User) : void
  + acceptFriendRequest(user : User) : void
  + denyFriendRequest(user : User) : void
  + removeFriend(user : User) : void
  + addChat(chat : Chat) : void
  + removeChat(chat : Chat) : void
  + sendMessage(chat : Chat, content : TextContent, attachments : List<Media>) : void
  + viewChat(chat : Chat) : void
}

enum Ownership {
  OWNER, MEMBER
}

class Profile {
  - name : String
  - title : String
  - location : String
  - language : Country
  - tags : Set<Specialization>
  - rating : Integer
  - avatar : Image
  + setName(name : String) : void
  + setTitle(title : String) : void
  + setLocation(location : String) : void
  + setTags(tags : String...) : void
  + setAvatar(avatar : Image) : void
  + addTag(tag : String) : void
  + addRating(rating : int) : void
  + getName() : String
}

class Socials {
  - relation : Map<UUID, Relation>
  + getRelation() : Map<UUID, Relation>
  + addFriend(user : User, userToAdd : User) : void
  + acceptFriendRequest(user : User, userToAccept : User) : void
  + denyFriendRequest(user : User, userToDeny : User) : void
  + removeFriend(user : User, userToRemove : User) : void
}

enum Relation {
  FRIENDS, INCOMING, OUTGOING
}

class Specialization {
  - static specializations : Set<String>
  - tag : String
  + setTag(tag : String) : void
  + static getSpecializations() : Set<String>
}

class CaseTag {
  - static caseTags : Set<String>
  - tag : String
  + setTag(tag : String) : void
  + static getCaseTags() : Set<String>
}

class Country {
  - static countries : Set<String>
  - country : String
  + setCountry(country : String) : void
  + static getCountries() : Set<String>
}

class Media extends Content {
  - path : String
  - mime : String
  - fileSize : Integer
  + setter() : void
  + getPath() : String
  + getMime() : String
  + getFileSize : Integer
}

class Image extends Media {
  - width : int
  - height : int
  - alternativeText : String
  + setter() : void
  + getWidth() : int
  + getHeight() : int
  + getAlternativeText() : String
}

class Content {

}

class TextContent extends Content {
  - text : String
  + setText(string : String) : void
}

class Email {
  - address : String
  + setAddress(address : String) : void
}

class Password {
  - hashedPassword : char[]
  + isPasswordStrong(password : CharSequence) : boolean
  + hashPassword(password : char[]) : char[]
  + checkPasswords(password : char[], password2 : char[]) : boolean
}

class Chat extends BaseEntity {
  - name : String
  - groupChat : boolean
  - members : Set<User>
  - history : List<Message>
  + setName(name : String) : void
  + setMembers(members : Set<UUID>) :void
  + getMembers() : Set<UUID>
  + getHistory() : List<Message>
  + isGroupChat() : boolean
  + addToHistory(message : Message) : void
  + sendMessage(user : User, chat : Chat, content : TextContent, attachments : List<Media>) : void
}

class Message {
  - sender : User
  - timestamp : Instant
  - content : TextContent
  - attachments : List<Media>
  - status : Status
  + setter() : void
  + equals() / hashCode()
}

enum Status {
  SENT, RECEIVED, SEEN
}

abstract BaseEntity {
  - id : UUID
  - createdAt : Instant
  - updatedAt : Instant
}

interface IRepository {
  + save(entity : BaseEntity) : void
  + findById(id : Integer) : BaseEntity
  + findAll() : List<BaseEntity>
  + delete(entity : BaseEntity) : void
}

User "1" -- "n" Medicalcase

User "1" -- "1" Email

User "1" -- "1" Password

User "1" -- "1" Profile

User "1" -- "1" Socials

User "1" -- "1" Chat

Chat "1" -- "n" Message

Profile "1" -- "1" Country

Message -- Status

Message "1" -- "n" Media

Message "1" -- "1" TextContent

UserSocials -- Relation

Specialization "n" -- "1" User

CaseTags "n" -- "1" Medicalcase

Medicalcase "1" -- "n" Vote

Medicalcase "1" -- "n" Content

@enduml