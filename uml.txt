@startuml

class Medicalcase extends BaseEntity {
  - title : String
  - owner : User
  - content : List<Content>
  - members : Set<User>
  - reactions : Set<User>
  - hashtags : Set<CaseTags>
  - votingOptions : LinkedHashSet<String>
  - votes : Set<Vote>
  + react(user : User) : void
  + addMember(user : User) : void
  + edit() : void
  + viewVotes() : void
  + viewMembers() : void
  + castVote(user : User) : void
  + evaluateVotes() : void
  + openChat() : void
}

class Vote {
  - user : Integer
  - answers : Map<String, Integer>
}

class User extends BaseEntity {
  - email : Email
  - hashedPassword : Password
  - profile : UserProfile
  - socials : UserSocials
  - verified : boolean
  - chats : List<Chat>
  - partOfMedicalcase : Set<Medicalcase>
  + verify() : void
  + setter/getter()
}

class UserProfile {
  - name : String
  - title : String
  - location : String
  - language : String
  - tags : Set<Hashtag>
  - rating : Integer
  - avatar : Image
}

class UserSocials {
  - relation : Map<Integer, Relation>
  + add(user : User) : User
  + accept(user : User) : User
  + deny(user : User) : User
}

enum Relation {
  FRIENDS, INCOMING, OUTGOING
}

abstract class Hashtag {
  - static tags : Set<String>
  + readTags() : void
}

class Specialization extends Hashtag {
}

class CaseTags extends Hashtag {
}

class Media extends Content {
  - path : String
  - mime : String
  - fileSize : Integer
}

class Image extends Media {
  - width : int
  - height : int
  - alternativeText : String
}

class Content {

}

class TextContent extends Content {
  - text : String
}

class Email {
  - address : String
}

class Password {
  - hashedPassword : char[]
  + hashPassword(String password) : String
  + checkPasswords(String password, String password2) : boolean
}

class Chat extends BaseEntity {
  - name : String
  - members : Set<User>
  - history : List<Message>
  + sendMessage(content : String, attachments : List<Media>) : voi
  + reply(message : Message) : void
  + viewMembers() : void
}

class Message {
  - sender : User
  - timestamp : Instant
  - content : String
  - attachments : List<Media>
  - status : Status
}

enum Status {
  SENT, RECEIVED, SEEN
}

class BaseEntity {
  - id : Integer
  - createdAt : Instant
  - updatedAt : Instant
}

interface IRepository {
  + save(entity : BaseEntity) : void
  + findById(id : Integer) : BaseEntity
  + findAll() : List<BaseEntity>
  + delete(entity : BaseEntity) : void
}

User -- Medicalcase

User -- Email

User -- Password

User -- UserProfile

User -- UserSocials

User -- Chat

Chat -- Message

Message -- Status

UserSocials -- Relation

Hashtag -- User

Hashtag -- Medicalcase

Medicalcase -- Vote

Medicalcase -- Content

@enduml
